// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: rentals.sql

package admin

import (
	"context"
	"database/sql"
)

const getRental = `-- name: GetRental :one
SELECT 
	rentals.bike_id,
	users.email AS user_email,
	users.first_name AS user_first_name,
	users.last_name AS user_last_name,
	rentals.status,
	rentals.start_time,
	rentals.end_time,
	rentals.start_latitude,
	rentals.start_longitude,
	rentals.end_latitude,
	rentals.end_longitude
FROM rentals
INNER JOIN users
	ON rentals.user_id = users.id
WHERE rentals.id = ?
`

type GetRentalRow struct {
	BikeID         int64
	UserEmail      string
	UserFirstName  string
	UserLastName   string
	Status         string
	StartTime      sql.NullTime
	EndTime        sql.NullTime
	StartLatitude  sql.NullFloat64
	StartLongitude sql.NullFloat64
	EndLatitude    sql.NullFloat64
	EndLongitude   sql.NullFloat64
}

func (q *Queries) GetRental(ctx context.Context, id int64) (GetRentalRow, error) {
	row := q.db.QueryRowContext(ctx, getRental, id)
	var i GetRentalRow
	err := row.Scan(
		&i.BikeID,
		&i.UserEmail,
		&i.UserFirstName,
		&i.UserLastName,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.StartLatitude,
		&i.StartLongitude,
		&i.EndLatitude,
		&i.EndLongitude,
	)
	return i, err
}

const listRentals = `-- name: ListRentals :many
SELECT 
	rentals.id AS rental_id,
	rentals.bike_id,
	users.email AS user_email,
	users.first_name AS user_first_name,
	users.last_name AS user_last_name,
	rentals.status,
	rentals.start_time,
	rentals.end_time,
	rentals.start_latitude,
	rentals.start_longitude,
	rentals.end_latitude,
	rentals.end_longitude
FROM rentals
INNER JOIN users
	ON rentals.user_id = users.id
ORDER BY rentals.start_time DESC
`

type ListRentalsRow struct {
	RentalID       int64
	BikeID         int64
	UserEmail      string
	UserFirstName  string
	UserLastName   string
	Status         string
	StartTime      sql.NullTime
	EndTime        sql.NullTime
	StartLatitude  sql.NullFloat64
	StartLongitude sql.NullFloat64
	EndLatitude    sql.NullFloat64
	EndLongitude   sql.NullFloat64
}

func (q *Queries) ListRentals(ctx context.Context) ([]ListRentalsRow, error) {
	rows, err := q.db.QueryContext(ctx, listRentals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRentalsRow
	for rows.Next() {
		var i ListRentalsRow
		if err := rows.Scan(
			&i.RentalID,
			&i.BikeID,
			&i.UserEmail,
			&i.UserFirstName,
			&i.UserLastName,
			&i.Status,
			&i.StartTime,
			&i.EndTime,
			&i.StartLatitude,
			&i.StartLongitude,
			&i.EndLatitude,
			&i.EndLongitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRental = `-- name: UpdateRental :exec
UPDATE rentals
SET 
	user_id = ?,
	bike_id = ?,
	status = ?,
	start_time = ?,
	end_time = ?,
	start_latitude = ?,
	start_longitude = ?,
	end_latitude = ?,
	end_longitude = ?
WHERE id = ?
`

type UpdateRentalParams struct {
	UserID         int64
	BikeID         int64
	Status         string
	StartTime      sql.NullTime
	EndTime        sql.NullTime
	StartLatitude  sql.NullFloat64
	StartLongitude sql.NullFloat64
	EndLatitude    sql.NullFloat64
	EndLongitude   sql.NullFloat64
	ID             int64
}

func (q *Queries) UpdateRental(ctx context.Context, arg UpdateRentalParams) error {
	_, err := q.db.ExecContext(ctx, updateRental,
		arg.UserID,
		arg.BikeID,
		arg.Status,
		arg.StartTime,
		arg.EndTime,
		arg.StartLatitude,
		arg.StartLongitude,
		arg.EndLatitude,
		arg.EndLongitude,
		arg.ID,
	)
	return err
}
