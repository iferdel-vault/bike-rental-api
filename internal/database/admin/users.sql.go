// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package admin

import (
	"context"
	"database/sql"
)

const getUser = `-- name: GetUser :one
SELECT 
	id,
	email,
	first_name,
	last_name,
	created_at,
	updated_at,
	is_admin
FROM users
WHERE id = ?
`

type GetUserRow struct {
	ID        int64
	Email     string
	FirstName string
	LastName  string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	IsAdmin   sql.NullInt64
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT 
	id,
	email,
	first_name,
	last_name,
	created_at,
	updated_at,
	is_admin
FROM users
`

type ListUsersRow struct {
	ID        int64
	Email     string
	FirstName string
	LastName  string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	IsAdmin   sql.NullInt64
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET 
	email = ?,
	first_name = ?,
	last_name = ?,
	updated_at = CURRENT_TIMESTAMP,
	is_admin = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Email     string
	FirstName string
	LastName  string
	IsAdmin   sql.NullInt64
	ID        int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.IsAdmin,
		arg.ID,
	)
	return err
}
