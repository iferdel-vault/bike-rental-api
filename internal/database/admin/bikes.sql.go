// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bikes.sql

package admin

import (
	"context"
	"database/sql"
)

const createBike = `-- name: CreateBike :one
INSERT INTO bikes (is_available, latitude, longitude)
VALUES (
	1,
	?,
	?
)
RETURNING id, is_available, latitude, longitude, created_at, updated_at
`

type CreateBikeParams struct {
	Latitude  sql.NullFloat64
	Longitude sql.NullFloat64
}

func (q *Queries) CreateBike(ctx context.Context, arg CreateBikeParams) (Bike, error) {
	row := q.db.QueryRowContext(ctx, createBike, arg.Latitude, arg.Longitude)
	var i Bike
	err := row.Scan(
		&i.ID,
		&i.IsAvailable,
		&i.Latitude,
		&i.Longitude,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBikes = `-- name: ListBikes :many
SELECT 
	id,
	is_available,
	latitude,
	longitude,
	created_at,
	updated_at
FROM bikes
`

func (q *Queries) ListBikes(ctx context.Context) ([]Bike, error) {
	rows, err := q.db.QueryContext(ctx, listBikes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bike
	for rows.Next() {
		var i Bike
		if err := rows.Scan(
			&i.ID,
			&i.IsAvailable,
			&i.Latitude,
			&i.Longitude,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBikeToAvailable = `-- name: UpdateBikeToAvailable :exec
UPDATE bikes 
SET 
	is_available = 1,
	latitude = ?, -- way to update tracking of geolocation
	longitude = ?, -- end values for geolocation after ending a rental
	updated_at = CURRENT_TIMESTAMP
WHERE id = ? AND is_available = 0
`

type UpdateBikeToAvailableParams struct {
	Latitude  sql.NullFloat64
	Longitude sql.NullFloat64
	ID        int64
}

func (q *Queries) UpdateBikeToAvailable(ctx context.Context, arg UpdateBikeToAvailableParams) error {
	_, err := q.db.ExecContext(ctx, updateBikeToAvailable, arg.Latitude, arg.Longitude, arg.ID)
	return err
}

const updateBikeToUnavailable = `-- name: UpdateBikeToUnavailable :exec
UPDATE bikes 
SET 
	is_available = 0,
	latitude = ?, -- start values of geolocation for a create rental
	longitude = ?,
	updated_at = CURRENT_TIMESTAMP
WHERE id = ? AND is_available = 1
`

type UpdateBikeToUnavailableParams struct {
	Latitude  sql.NullFloat64
	Longitude sql.NullFloat64
	ID        int64
}

func (q *Queries) UpdateBikeToUnavailable(ctx context.Context, arg UpdateBikeToUnavailableParams) error {
	_, err := q.db.ExecContext(ctx, updateBikeToUnavailable, arg.Latitude, arg.Longitude, arg.ID)
	return err
}
