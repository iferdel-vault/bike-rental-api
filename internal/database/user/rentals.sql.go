// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: rentals.sql

package user

import (
	"context"
	"database/sql"
)

const createRental = `-- name: CreateRental :one
INSERT INTO rentals (user_id, bike_id, status, start_latitude, start_longitude)
VALUES (
	?,
	?,
	'running',
	?,
	?
)
RETURNING id, user_id, bike_id, status, start_time, end_time, start_latitude, start_longitude, end_latitude, end_longitude, duration
`

type CreateRentalParams struct {
	UserID         int64
	BikeID         int64
	StartLatitude  sql.NullFloat64
	StartLongitude sql.NullFloat64
}

func (q *Queries) CreateRental(ctx context.Context, arg CreateRentalParams) (Rental, error) {
	row := q.db.QueryRowContext(ctx, createRental,
		arg.UserID,
		arg.BikeID,
		arg.StartLatitude,
		arg.StartLongitude,
	)
	var i Rental
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BikeID,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.StartLatitude,
		&i.StartLongitude,
		&i.EndLatitude,
		&i.EndLongitude,
		&i.Duration,
	)
	return i, err
}

const listUserRentals = `-- name: ListUserRentals :many
SELECT 
		start_time,
		end_time,
		start_latitude,
		start_longitude,
		end_latitude,
		end_longitude
FROM rentals
WHERE user_id = ?
`

type ListUserRentalsRow struct {
	StartTime      sql.NullTime
	EndTime        sql.NullTime
	StartLatitude  sql.NullFloat64
	StartLongitude sql.NullFloat64
	EndLatitude    sql.NullFloat64
	EndLongitude   sql.NullFloat64
}

func (q *Queries) ListUserRentals(ctx context.Context, userID int64) ([]ListUserRentalsRow, error) {
	rows, err := q.db.QueryContext(ctx, listUserRentals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserRentalsRow
	for rows.Next() {
		var i ListUserRentalsRow
		if err := rows.Scan(
			&i.StartTime,
			&i.EndTime,
			&i.StartLatitude,
			&i.StartLongitude,
			&i.EndLatitude,
			&i.EndLongitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRentalToEnded = `-- name: UpdateRentalToEnded :exec
UPDATE rentals 
SET 
	status = 'ended',
	end_latitude = ?,
	end_longitude = ?
WHERE user_id = ? AND status = 'running'
`

type UpdateRentalToEndedParams struct {
	EndLatitude  sql.NullFloat64
	EndLongitude sql.NullFloat64
	UserID       int64
}

func (q *Queries) UpdateRentalToEnded(ctx context.Context, arg UpdateRentalToEndedParams) error {
	_, err := q.db.ExecContext(ctx, updateRentalToEnded, arg.EndLatitude, arg.EndLongitude, arg.UserID)
	return err
}
