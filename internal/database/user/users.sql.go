// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package user

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, hashed_password, first_name, last_name)
VALUES (
	?,
	?,
	?,
	?
)
RETURNING id, email, hashed_password, first_name, last_name, created_at, updated_at, is_admin
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
	FirstName      string
	LastName       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT 
	email, 
	first_name, 
	last_name, 
	created_at, 
	updated_at
FROM users
WHERE id = ?
`

type GetUserByIDRow struct {
	Email     string
	FirstName string
	LastName  string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET 
	email = ?,
	hashed_password = ?,
	first_name = ?,
	last_name = ?,
	updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserParams struct {
	Email          string
	HashedPassword string
	FirstName      string
	LastName       string
	ID             int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
		arg.ID,
	)
	return err
}
